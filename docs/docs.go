// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "produces": [
        "application/json"
    ],
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {
            "name": "API Support",
            "email": "alfred.7790@gmail.com"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/cart/{id}": {
            "get": {
                "description": "Retrieves a shopping cart by its ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Shopping Carts"
                ],
                "summary": "Get a shopping cart by ID",
                "operationId": "find-shopping-cart",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Shopping cart ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Found shopping cart",
                        "schema": {
                            "$ref": "#/definitions/dto.ShoppingCartDTO"
                        }
                    },
                    "400": {
                        "description": "Invalid shopping cart ID",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorDTO"
                        }
                    },
                    "500": {
                        "description": "Failed to retrieve shopping cart",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorDTO"
                        }
                    }
                }
            }
        },
        "/cart/{id}/items": {
            "post": {
                "description": "Adds an item to the specified shopping cart",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Shopping Carts"
                ],
                "summary": "Add an item to a shopping cart",
                "operationId": "add-item",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Shopping cart ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Item data",
                        "name": "item",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.ItemData"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Updated shopping cart",
                        "schema": {
                            "$ref": "#/definitions/dto.ShoppingCartDTO"
                        }
                    },
                    "400": {
                        "description": "Invalid shopping cart ID or item data",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorDTO"
                        }
                    },
                    "500": {
                        "description": "Failed to add item to shopping cart",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorDTO"
                        }
                    }
                }
            },
            "delete": {
                "description": "Removes the specified items from the shopping cart",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Shopping Carts"
                ],
                "summary": "Remove items from a shopping cart",
                "operationId": "remove-items",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Shopping cart ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "IDs of the products to remove",
                        "name": "productIds",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "integer"
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Updated shopping cart",
                        "schema": {
                            "$ref": "#/definitions/dto.ShoppingCartDTO"
                        }
                    },
                    "400": {
                        "description": "Invalid shopping cart ID or item IDs",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorDTO"
                        }
                    },
                    "500": {
                        "description": "Failed to remove items from shopping cart",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorDTO"
                        }
                    }
                }
            }
        },
        "/carts": {
            "post": {
                "description": "Creates a new shopping cart with the specified items",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Shopping Carts"
                ],
                "summary": "Create a new shopping cart",
                "operationId": "new-cart",
                "parameters": [
                    {
                        "description": "Items to add to the shopping cart",
                        "name": "items",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/dto.ItemData"
                            }
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created shopping cart",
                        "schema": {
                            "$ref": "#/definitions/dto.ShoppingCartDTO"
                        }
                    },
                    "400": {
                        "description": "Invalid item data",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorDTO"
                        }
                    },
                    "500": {
                        "description": "Failed to create shopping cart",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorDTO"
                        }
                    }
                }
            }
        },
        "/product/{id}": {
            "get": {
                "description": "Retrieves a product by its ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Products"
                ],
                "summary": "Get a product by ID",
                "operationId": "find-product",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Product ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Product found",
                        "schema": {
                            "$ref": "#/definitions/dto.ProductDTO"
                        }
                    },
                    "400": {
                        "description": "Invalid product ID",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorDTO"
                        }
                    },
                    "404": {
                        "description": "Product does not exist",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorDTO"
                        }
                    },
                    "500": {
                        "description": "Failed to retrieve product",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorDTO"
                        }
                    }
                }
            },
            "delete": {
                "description": "Deletes a product by its ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Products"
                ],
                "summary": "Delete a product",
                "operationId": "remove-product",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Product ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Product deleted successfully",
                        "schema": {
                            "$ref": "#/definitions/responses.SuccessDTO"
                        }
                    },
                    "400": {
                        "description": "Invalid product ID",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorDTO"
                        }
                    },
                    "500": {
                        "description": "Failed to delete product",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorDTO"
                        }
                    }
                }
            },
            "patch": {
                "description": "Updates a product with the provided updates",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Products"
                ],
                "summary": "Update a product",
                "operationId": "update-product",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Product ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Product updates",
                        "name": "updates",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.ProductData"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Product updated successfully",
                        "schema": {
                            "$ref": "#/definitions/responses.SuccessDTO"
                        }
                    },
                    "400": {
                        "description": "Invalid product ID or updates",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorDTO"
                        }
                    },
                    "500": {
                        "description": "Failed to update product",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorDTO"
                        }
                    }
                }
            }
        },
        "/products": {
            "get": {
                "description": "Retrieves a paginated and filtered list of products based on search criteria",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Products"
                ],
                "summary": "Get a paginated and filtered list of products",
                "operationId": "find-products",
                "parameters": [
                    {
                        "minimum": 1,
                        "type": "integer",
                        "description": "Page number",
                        "name": "page",
                        "in": "query",
                        "required": true
                    },
                    {
                        "minimum": 1,
                        "type": "integer",
                        "description": "Page size",
                        "name": "pageSize",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Search term to filter products by code or name",
                        "name": "searchTerm",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Field to order results by. Can be 'name', 'price', or 'code'. Default is 'price'.",
                        "name": "orderBy",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "description": "Whether to order results in ascending or descending order. Default is true.",
                        "name": "ascending",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Paginated and filtered list of products",
                        "schema": {
                            "$ref": "#/definitions/dto.ProductsListResp"
                        }
                    },
                    "400": {
                        "description": "Invalid page, pageSize, or search parameters",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorDTO"
                        }
                    },
                    "500": {
                        "description": "Failed to retrieve products",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorDTO"
                        }
                    }
                }
            },
            "post": {
                "description": "Creates a new product with the provided data",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Products"
                ],
                "summary": "Create a new product",
                "operationId": "new-product",
                "parameters": [
                    {
                        "description": "Product data",
                        "name": "data",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.ProductData"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created product",
                        "schema": {
                            "$ref": "#/definitions/dto.ProductDTO"
                        }
                    },
                    "400": {
                        "description": "Invalid product data",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorDTO"
                        }
                    },
                    "500": {
                        "description": "Failed to create product",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorDTO"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "dto.ItemCartDTO": {
            "type": "object",
            "properties": {
                "count": {
                    "type": "integer"
                },
                "product": {
                    "$ref": "#/definitions/dto.ProductDTO"
                },
                "productID": {
                    "type": "integer"
                }
            }
        },
        "dto.ItemData": {
            "type": "object",
            "properties": {
                "count": {
                    "type": "integer"
                },
                "productID": {
                    "type": "integer"
                }
            }
        },
        "dto.ProductDTO": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "imageURL": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "price": {
                    "type": "number"
                }
            }
        },
        "dto.ProductData": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "string"
                },
                "imageURL": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "price": {
                    "type": "number"
                }
            }
        },
        "dto.ProductsListResp": {
            "type": "object",
            "properties": {
                "products": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dto.ProductDTO"
                    }
                },
                "total": {
                    "type": "integer"
                }
            }
        },
        "dto.ShoppingCartDTO": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer"
                },
                "items": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dto.ItemCartDTO"
                    }
                }
            }
        },
        "responses.ErrorDTO": {
            "type": "object",
            "properties": {
                "errorMessage": {
                    "type": "string"
                },
                "message": {
                    "type": "string"
                }
            }
        },
        "responses.SuccessDTO": {
            "type": "object",
            "properties": {
                "message": {}
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "",
	BasePath:         "/v1",
	Schemes:          []string{"http", "https"},
	Title:            "Codifin Challenge API",
	Description:      "Service to manage products",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
